{
  "specs": {},
  "functional_spec_count": {},
  "testsuites": [
    {
      "cases": [
        {
          "classname": "test_cases.test_admin_login",
          "name": "test_title_verification",
          "developer": "-",
          "test_description": "",
          "status": "Passed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "",
          "functional_specifications": [],
          "categories": []
        },
        {
          "classname": "test_cases.test_admin_login",
          "name": "test_valid_admin_login",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=138.0.7204.98)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff633ff6f75+76917]\n\tGetHandleVerifier [0x0x7ff633ff6fd0+77008]\n\t(No symbol) [0x0x7ff633da9dea]\n\t(No symbol) [0x0x7ff633e0001e]\n\t(No symbol) [0x0x7ff633e0050c]\n\t(No symbol) [0x0x7ff633e53887]\n\t(No symbol) [0x0x7ff633e284af]\n\t(No symbol) [0x0x7ff633e5065c]\n\t(No symbol) [0x0x7ff633e28243]\n\t(No symbol) [0x0x7ff633df1431]\n\t(No symbol) [0x0x7ff633df21c3]\n\tGetHandleVerifier [0x0x7ff6342cd2ad+3051437]\n\tGetHandleVerifier [0x0x7ff6342c7903+3028483]\n\tGetHandleVerifier [0x0x7ff6342e589d+3151261]\n\tGetHandleVerifier [0x0x7ff63401183e+185662]\n\tGetHandleVerifier [0x0x7ff6340196ff+218111]\n\tGetHandleVerifier [0x0x7ff633fffaf4+112628]\n\tGetHandleVerifier [0x0x7ff633fffca9+113065]\n\tGetHandleVerifier [0x0x7ff633fe6c78+10616]\n\tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\n\tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\nDetails: self = <test_cases.test_admin_login.Test_01_Admin_login object at 0x00000286A852B9D0>\n\n    def test_valid_admin_login(self):\n        self.driver=webdriver.Chrome()\n        self.driver.get(self.admin_page_url)\n        self.admin_lp=login_admin_page(self.driver)\n        self.admin_lp.enter_username(self.username)\n        self.admin_lp.enter_password(self.password)\n        self.admin_lp.click_login(self.driver)\n>       actual_dashboard_text=self.driver.find_element(By.xpath,\"//h6[text()='Dashboard']\").text\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_cases\\test_admin_login.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000286A861CA50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...ff633fe6c78+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=138.0.7204.98)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff633ff6f75+76917]\nE       \tGetHandleVerifier [0x0x7ff633ff6fd0+77008]\nE       \t(No symbol) [0x0x7ff633da9dea]\nE       \t(No symbol) [0x0x7ff633e0001e]\nE       \t(No symbol) [0x0x7ff633e0050c]\nE       \t(No symbol) [0x0x7ff633e53887]\nE       \t(No symbol) [0x0x7ff633e284af]\nE       \t(No symbol) [0x0x7ff633e5065c]\nE       \t(No symbol) [0x0x7ff633e28243]\nE       \t(No symbol) [0x0x7ff633df1431]\nE       \t(No symbol) [0x0x7ff633df21c3]\nE       \tGetHandleVerifier [0x0x7ff6342cd2ad+3051437]\nE       \tGetHandleVerifier [0x0x7ff6342c7903+3028483]\nE       \tGetHandleVerifier [0x0x7ff6342e589d+3151261]\nE       \tGetHandleVerifier [0x0x7ff63401183e+185662]\nE       \tGetHandleVerifier [0x0x7ff6340196ff+218111]\nE       \tGetHandleVerifier [0x0x7ff633fffaf4+112628]\nE       \tGetHandleVerifier [0x0x7ff633fffca9+113065]\nE       \tGetHandleVerifier [0x0x7ff633fe6c78+10616]\nE       \tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException",
          "functional_specifications": [],
          "categories": []
        },
        {
          "classname": "test_cases.test_admin_login",
          "name": "test_invalid_admin_login",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=138.0.7204.98)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff633ff6f75+76917]\n\tGetHandleVerifier [0x0x7ff633ff6fd0+77008]\n\t(No symbol) [0x0x7ff633da9dea]\n\t(No symbol) [0x0x7ff633e0001e]\n\t(No symbol) [0x0x7ff633e0050c]\n\t(No symbol) [0x0x7ff633e53887]\n\t(No symbol) [0x0x7ff633e284af]\n\t(No symbol) [0x0x7ff633e5065c]\n\t(No symbol) [0x0x7ff633e28243]\n\t(No symbol) [0x0x7ff633df1431]\n\t(No symbol) [0x0x7ff633df21c3]\n\tGetHandleVerifier [0x0x7ff6342cd2ad+3051437]\n\tGetHandleVerifier [0x0x7ff6342c7903+3028483]\n\tGetHandleVerifier [0x0x7ff6342e589d+3151261]\n\tGetHandleVerifier [0x0x7ff63401183e+185662]\n\tGetHandleVerifier [0x0x7ff6340196ff+218111]\n\tGetHandleVerifier [0x0x7ff633fffaf4+112628]\n\tGetHandleVerifier [0x0x7ff633fffca9+113065]\n\tGetHandleVerifier [0x0x7ff633fe6c78+10616]\n\tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\n\tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\nDetails: self = <test_cases.test_admin_login.Test_01_Admin_login object at 0x00000286A85E83E0>\n\n    def test_invalid_admin_login(self):\n        self.driver=webdriver.Chrome()\n        self.driver.get(self.admin_page_url)\n        self.admin_lp=login_admin_page(self.driver)\n        self.admin_lp.enter_username(self.invalid_username)\n        self.admin_lp.enter_password(self.password)\n        self.admin_lp.click_login(self.driver)\n>       error_message = self.driver.find_element(By.xpath, \"//p[text()='Invalid credentials']\").text\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_cases\\test_admin_login.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000286A861E0D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...ff633fe6c78+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=138.0.7204.98)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff633ff6f75+76917]\nE       \tGetHandleVerifier [0x0x7ff633ff6fd0+77008]\nE       \t(No symbol) [0x0x7ff633da9dea]\nE       \t(No symbol) [0x0x7ff633e0001e]\nE       \t(No symbol) [0x0x7ff633e0050c]\nE       \t(No symbol) [0x0x7ff633e53887]\nE       \t(No symbol) [0x0x7ff633e284af]\nE       \t(No symbol) [0x0x7ff633e5065c]\nE       \t(No symbol) [0x0x7ff633e28243]\nE       \t(No symbol) [0x0x7ff633df1431]\nE       \t(No symbol) [0x0x7ff633df21c3]\nE       \tGetHandleVerifier [0x0x7ff6342cd2ad+3051437]\nE       \tGetHandleVerifier [0x0x7ff6342c7903+3028483]\nE       \tGetHandleVerifier [0x0x7ff6342e589d+3151261]\nE       \tGetHandleVerifier [0x0x7ff63401183e+185662]\nE       \tGetHandleVerifier [0x0x7ff6340196ff+218111]\nE       \tGetHandleVerifier [0x0x7ff633fffaf4+112628]\nE       \tGetHandleVerifier [0x0x7ff633fffca9+113065]\nE       \tGetHandleVerifier [0x0x7ff633fe6c78+10616]\nE       \tBaseThreadInitThunk [0x0x7ffb5d42e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffb5eedc34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException",
          "functional_specifications": [],
          "categories": []
        }
      ]
    }
  ],
  "test_environment": "Development",
  "timestamp": "12 Jul 2025, 16:35",
  "img_url": "https://icon.icepanel.io/Technology/svg/pytest.svg",
  "test_status": "complete",
  "report_title": "pytest HTML Report",
  "category_count": {},
  "all_categories": []
}